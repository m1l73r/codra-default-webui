import {
  createSplitProps
} from "./6WEDGJKQ.jsx";
import {
  ark
} from "./UFYZ7HLU.jsx";
import {
  useEnvironmentContext
} from "./6J5H27AQ.jsx";
import {
  runIfFn
} from "./KGOB2IMX.jsx";
import {
  useLocaleContext
} from "./YUC6JE7K.jsx";
import {
  createContext
} from "./TVCIHLER.jsx";
import {
  __export
} from "./7IUG3E2V.jsx";

// src/components/qr-code/use-qr-code-context.ts
var [QrCodeProvider, useQrCodeContext] = createContext({
  hookName: "useQrCodeContext",
  providerName: "<QrCodeProvider />"
});

// src/components/qr-code/qr-code-context.ts
var QrCodeContext = (props) => props.children(useQrCodeContext());

// src/components/qr-code/qr-code-download-trigger.tsx
import { mergeProps } from "@zag-js/solid";
var QrCodeDownloadTrigger = (props) => {
  const [downloadTriggerProps, localProps] = createSplitProps()(props, [
    "fileName",
    "mimeType",
    "quality"
  ]);
  const qrCode2 = useQrCodeContext();
  const mergedProps = mergeProps(() => qrCode2().getDownloadTriggerProps(downloadTriggerProps), localProps);
  return <ark.button {...mergedProps} />;
};

// src/components/qr-code/qr-code-frame.tsx
import { mergeProps as mergeProps2 } from "@zag-js/solid";
var QrCodeFrame = (props) => {
  const qrCode2 = useQrCodeContext();
  const mergedProps = mergeProps2(() => qrCode2().getFrameProps(), props);
  return <ark.svg {...mergedProps} />;
};

// src/components/qr-code/qr-code-overlay.tsx
import { mergeProps as mergeProps3 } from "@zag-js/solid";
var QrCodeOverlay = (props) => {
  const qrCode2 = useQrCodeContext();
  const mergedProps = mergeProps3(() => qrCode2().getOverlayProps(), props);
  return <ark.div {...mergedProps} />;
};

// src/components/qr-code/qr-code-pattern.tsx
import { mergeProps as mergeProps4 } from "@zag-js/solid";
var QrCodePattern = (props) => {
  const qrCode2 = useQrCodeContext();
  const mergedProps = mergeProps4(() => qrCode2().getPatternProps(), props);
  return <ark.path {...mergedProps} />;
};

// src/components/qr-code/qr-code-root.tsx
import { mergeProps as mergeProps5 } from "@zag-js/solid";

// src/components/qr-code/use-qr-code.ts
import * as qrCode from "@zag-js/qr-code";
import { normalizeProps, useMachine } from "@zag-js/solid";
import { createMemo, createUniqueId } from "solid-js";
var useQrCode = (props) => {
  const id = createUniqueId();
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const machineProps = createMemo(() => ({
    id,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    ...runIfFn(props)
  }));
  const service = useMachine(qrCode.machine, machineProps);
  return createMemo(() => qrCode.connect(service, normalizeProps));
};

// src/components/qr-code/qr-code-root.tsx
var QrCodeRoot = (props) => {
  const [useQrCodeProps, restProps] = createSplitProps()(props, [
    "defaultValue",
    "encoding",
    "id",
    "ids",
    "onValueChange",
    "pixelSize",
    "value"
  ]);
  const api = useQrCode(useQrCodeProps);
  const mergedProps = mergeProps5(() => api().getRootProps(), restProps);
  return <QrCodeProvider value={api}>
      <ark.div {...mergedProps} />
    </QrCodeProvider>;
};

// src/components/qr-code/qr-code-root-provider.tsx
import { mergeProps as mergeProps6 } from "@zag-js/solid";
var QrCodeRootProvider = (props) => {
  const [{ value: qrCode2 }, localProps] = createSplitProps()(props, ["value"]);
  const mergedProps = mergeProps6(() => qrCode2().getRootProps(), localProps);
  return <QrCodeProvider value={qrCode2}>
      <ark.div {...mergedProps} />
    </QrCodeProvider>;
};

// src/components/qr-code/qr-code.anatomy.ts
import { anatomy } from "@zag-js/qr-code";

// src/components/qr-code/qr-code.ts
var qr_code_exports = {};
__export(qr_code_exports, {
  Context: () => QrCodeContext,
  DownloadTrigger: () => QrCodeDownloadTrigger,
  Frame: () => QrCodeFrame,
  Overlay: () => QrCodeOverlay,
  Pattern: () => QrCodePattern,
  Root: () => QrCodeRoot,
  RootProvider: () => QrCodeRootProvider
});

export {
  useQrCodeContext,
  QrCodeContext,
  QrCodeDownloadTrigger,
  QrCodeFrame,
  QrCodeOverlay,
  QrCodePattern,
  useQrCode,
  QrCodeRoot,
  QrCodeRootProvider,
  anatomy,
  qr_code_exports
};
