import * as passwordInput$1 from '@zag-js/password-input';
import { VisibilityChangeDetails } from '@zag-js/password-input';
export { VisibilityChangeDetails as PasswordInputVisibilityChangeDetails, anatomy as passwordInputAnatomy } from '@zag-js/password-input';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional, M as MaybeAccessor } from '../../types-Bc0WfPsv.js';
import { HTMLProps, PolymorphicProps } from '../factory.js';

interface UsePasswordInputProps extends Optional<Omit<passwordInput$1.Props, 'dir' | 'getRootNode'>, 'id'> {
}
interface UsePasswordInputReturn extends Accessor<passwordInput$1.Api<PropTypes>> {
}
declare const usePasswordInput: (props?: MaybeAccessor<UsePasswordInputProps>) => UsePasswordInputReturn;

interface UsePasswordInputContext extends UsePasswordInputReturn {
}
declare const usePasswordInputContext: () => UsePasswordInputContext;

interface PasswordInputContextProps {
    children: (context: UsePasswordInputContext) => JSX.Element;
}
declare const PasswordInputContext: (props: PasswordInputContextProps) => JSX.Element;

interface PasswordInputControlBaseProps extends PolymorphicProps<'div'> {
}
interface PasswordInputControlProps extends HTMLProps<'div'>, PasswordInputControlBaseProps {
}
declare const PasswordInputControl: (props: PasswordInputControlProps) => solid_js.JSX.Element;

interface PasswordInputIndicatorBaseProps extends PolymorphicProps<'span'> {
    /**
     * The fallback content to display when the password is not visible.
     */
    fallback?: JSX.Element;
}
interface PasswordInputIndicatorProps extends HTMLProps<'span'>, PasswordInputIndicatorBaseProps {
}
declare const PasswordInputIndicator: (props: PasswordInputIndicatorProps) => JSX.Element;

interface PasswordInputInputBaseProps extends PolymorphicProps<'input'> {
}
interface PasswordInputInputProps extends HTMLProps<'input'>, PasswordInputInputBaseProps {
}
declare const PasswordInputInput: (props: PasswordInputInputProps) => solid_js.JSX.Element;

interface PasswordInputLabelBaseProps extends PolymorphicProps<'label'> {
}
interface PasswordInputLabelProps extends HTMLProps<'label'>, PasswordInputLabelBaseProps {
}
declare const PasswordInputLabel: (props: PasswordInputLabelProps) => solid_js.JSX.Element;

interface PasswordInputRootBaseProps extends UsePasswordInputProps, PolymorphicProps<'div'> {
}
interface PasswordInputRootProps extends HTMLProps<'div'>, PasswordInputRootBaseProps {
}
declare const PasswordInputRoot: (props: PasswordInputRootProps) => solid_js.JSX.Element;

interface PasswordInputRootProviderBaseProps extends PolymorphicProps<'div'> {
    value: UsePasswordInputContext;
    children?: JSX.Element;
}
interface PasswordInputRootProviderProps extends HTMLProps<'div'>, PasswordInputRootProviderBaseProps {
}
declare const PasswordInputRootProvider: (props: PasswordInputRootProviderProps) => JSX.Element;

interface PasswordInputVisibilityTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface PasswordInputVisibilityTriggerProps extends HTMLProps<'button'>, PasswordInputVisibilityTriggerBaseProps {
}
declare const PasswordInputVisibilityTrigger: (props: PasswordInputVisibilityTriggerProps) => solid_js.JSX.Element;

declare const passwordInput_VisibilityChangeDetails: typeof VisibilityChangeDetails;
declare namespace passwordInput {
  export { PasswordInputContext as Context, type PasswordInputContextProps as ContextProps, PasswordInputControl as Control, type PasswordInputControlBaseProps as ControlBaseProps, type PasswordInputControlProps as ControlProps, PasswordInputIndicator as Indicator, type PasswordInputIndicatorBaseProps as IndicatorBaseProps, type PasswordInputIndicatorProps as IndicatorProps, PasswordInputInput as Input, type PasswordInputInputBaseProps as InputBaseProps, type PasswordInputInputProps as InputProps, PasswordInputLabel as Label, type PasswordInputLabelBaseProps as LabelBaseProps, type PasswordInputLabelProps as LabelProps, PasswordInputRoot as Root, type PasswordInputRootBaseProps as RootBaseProps, type PasswordInputRootProps as RootProps, PasswordInputRootProvider as RootProvider, type PasswordInputRootProviderBaseProps as RootProviderBaseProps, type PasswordInputRootProviderProps as RootProviderProps, passwordInput_VisibilityChangeDetails as VisibilityChangeDetails, PasswordInputVisibilityTrigger as VisibilityTrigger, type PasswordInputVisibilityTriggerBaseProps as VisibilityTriggerBaseProps, type PasswordInputVisibilityTriggerProps as VisibilityTriggerProps };
}

export { passwordInput as PasswordInput, PasswordInputContext, type PasswordInputContextProps, PasswordInputControl, type PasswordInputControlBaseProps, type PasswordInputControlProps, PasswordInputIndicator, type PasswordInputIndicatorBaseProps, type PasswordInputIndicatorProps, PasswordInputInput, type PasswordInputInputBaseProps, type PasswordInputInputProps, PasswordInputLabel, type PasswordInputLabelBaseProps, type PasswordInputLabelProps, PasswordInputRoot, type PasswordInputRootBaseProps, type PasswordInputRootProps, PasswordInputRootProvider, type PasswordInputRootProviderBaseProps, type PasswordInputRootProviderProps, PasswordInputVisibilityTrigger, type PasswordInputVisibilityTriggerBaseProps, type PasswordInputVisibilityTriggerProps, type UsePasswordInputContext, type UsePasswordInputProps, type UsePasswordInputReturn, usePasswordInput, usePasswordInputContext };
