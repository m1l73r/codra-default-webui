import * as floatingPanel$1 from '@zag-js/floating-panel';
import { ResizeTriggerProps, StageTriggerProps, OpenChangeDetails, PositionChangeDetails, SizeChangeDetails, StageChangeDetails } from '@zag-js/floating-panel';
export { OpenChangeDetails as FloatingPanelOpenChangeDetails, PositionChangeDetails as FloatingPanelPositionChangeDetails, SizeChangeDetails as FloatingPanelSizeChangeDetails, StageChangeDetails as FloatingPanelStageChangeDetails, anatomy as floatingPanelAnatomy } from '@zag-js/floating-panel';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { HTMLProps, PolymorphicProps } from '../factory.js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional, M as MaybeAccessor } from '../../types-Bc0WfPsv.js';
import { U as UsePresenceProps } from '../../use-presence-CT1xpuuo.js';
import '@zag-js/presence';
import '../../render-strategy-B5MqQP3X.js';

interface FloatingPanelBodyBaseProps extends PolymorphicProps<'div'> {
}
interface FloatingPanelBodyProps extends HTMLProps<'div'>, FloatingPanelBodyBaseProps {
}
declare const FloatingPanelBody: (props: FloatingPanelBodyProps) => solid_js.JSX.Element;

interface FloatingPanelCloseTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface FloatingPanelCloseTriggerProps extends HTMLProps<'button'>, FloatingPanelCloseTriggerBaseProps {
}
declare const FloatingPanelCloseTrigger: (props: FloatingPanelCloseTriggerProps) => solid_js.JSX.Element;

interface FloatingPanelContentBaseProps extends PolymorphicProps<'div'> {
}
interface FloatingPanelContentProps extends HTMLProps<'div'>, FloatingPanelContentBaseProps {
}
declare const FloatingPanelContent: (props: FloatingPanelContentProps) => solid_js.JSX.Element;

interface UseFloatingPanelProps extends Optional<Omit<floatingPanel$1.Props, 'getRootNode'>, 'id'> {
}
interface UseFloatingPanelReturn extends Accessor<floatingPanel$1.Api<PropTypes>> {
}
declare const useFloatingPanel: (props?: MaybeAccessor<UseFloatingPanelProps>) => UseFloatingPanelReturn;

interface UseFloatingPanelContext extends UseFloatingPanelReturn {
}
declare const useFloatingPanelContext: () => UseFloatingPanelContext;

interface FloatingPanelContextProps {
    children: (context: UseFloatingPanelContext) => JSX.Element;
}
declare const FloatingPanelContext: (props: FloatingPanelContextProps) => JSX.Element;

interface FloatingPanelDragTriggerBaseProps extends PolymorphicProps<'div'> {
}
interface FloatingPanelDragTriggerProps extends HTMLProps<'div'>, FloatingPanelDragTriggerBaseProps {
}
declare const FloatingPanelDragTrigger: (props: FloatingPanelDragTriggerProps) => solid_js.JSX.Element;

interface FloatingPanelHeaderBaseProps extends PolymorphicProps<'div'> {
}
interface FloatingPanelHeaderProps extends HTMLProps<'div'>, FloatingPanelHeaderBaseProps {
}
declare const FloatingPanelHeader: (props: FloatingPanelHeaderProps) => solid_js.JSX.Element;

interface FloatingPanelPositionerBaseProps extends PolymorphicProps<'div'> {
}
interface FloatingPanelPositionerProps extends HTMLProps<'div'>, FloatingPanelPositionerBaseProps {
}
declare const FloatingPanelPositioner: (props: FloatingPanelPositionerProps) => solid_js.JSX.Element;

interface FloatingPanelResizeTriggerBaseProps extends ResizeTriggerProps, PolymorphicProps<'div'> {
}
interface FloatingPanelResizeTriggerProps extends HTMLProps<'div'>, FloatingPanelResizeTriggerBaseProps {
}
declare const FloatingPanelResizeTrigger: (props: FloatingPanelResizeTriggerProps) => solid_js.JSX.Element;

interface FloatingPanelStageTriggerBaseProps extends PolymorphicProps<'button'>, StageTriggerProps {
}
interface FloatingPanelStageTriggerProps extends HTMLProps<'button'>, FloatingPanelStageTriggerBaseProps {
}
declare const FloatingPanelStageTrigger: (props: FloatingPanelStageTriggerProps) => solid_js.JSX.Element;

interface FloatingPanelRootBaseProps extends UseFloatingPanelProps, UsePresenceProps {
}
interface FloatingPanelRootProps extends FloatingPanelRootBaseProps {
    children?: JSX.Element;
}
declare const FloatingPanelRoot: (props: FloatingPanelRootProps) => JSX.Element;

interface RootProviderProps {
    value: UseFloatingPanelReturn;
}
interface FloatingPanelRootProviderBaseProps extends RootProviderProps, Omit<UsePresenceProps, 'present'> {
}
interface FloatingPanelRootProviderProps extends FloatingPanelRootProviderBaseProps {
    children?: JSX.Element;
}
declare const FloatingPanelRootProvider: (props: FloatingPanelRootProviderProps) => JSX.Element;

interface FloatingPanelTitleBaseProps extends PolymorphicProps<'h2'> {
}
interface FloatingPanelTitleProps extends HTMLProps<'h2'>, FloatingPanelTitleBaseProps {
}
declare const FloatingPanelTitle: (props: FloatingPanelTitleProps) => solid_js.JSX.Element;

interface FloatingPanelTriggerBaseProps extends PolymorphicProps<'button'> {
}
interface FloatingPanelTriggerProps extends HTMLProps<'button'>, FloatingPanelTriggerBaseProps {
}
declare const FloatingPanelTrigger: (props: FloatingPanelTriggerProps) => solid_js.JSX.Element;

interface FloatingPanelControlBaseProps extends PolymorphicProps<'div'> {
}
interface FloatingPanelControlProps extends HTMLProps<'div'>, FloatingPanelControlBaseProps {
}
declare const FloatingPanelControl: (props: FloatingPanelControlProps) => solid_js.JSX.Element;

declare const floatingPanel_OpenChangeDetails: typeof OpenChangeDetails;
declare const floatingPanel_PositionChangeDetails: typeof PositionChangeDetails;
declare const floatingPanel_SizeChangeDetails: typeof SizeChangeDetails;
declare const floatingPanel_StageChangeDetails: typeof StageChangeDetails;
declare namespace floatingPanel {
  export { FloatingPanelBody as Body, type FloatingPanelBodyBaseProps as BodyBaseProps, type FloatingPanelBodyProps as BodyProps, FloatingPanelCloseTrigger as CloseTrigger, type FloatingPanelCloseTriggerBaseProps as CloseTriggerBaseProps, type FloatingPanelCloseTriggerProps as CloseTriggerProps, FloatingPanelContent as Content, type FloatingPanelContentBaseProps as ContentBaseProps, type FloatingPanelContentProps as ContentProps, FloatingPanelContext as Context, type FloatingPanelContextProps as ContextProps, FloatingPanelControl as Control, type FloatingPanelControlBaseProps as ControlBaseProps, type FloatingPanelControlProps as ControlProps, FloatingPanelDragTrigger as DragTrigger, type FloatingPanelDragTriggerBaseProps as DragTriggerBaseProps, type FloatingPanelDragTriggerProps as DragTriggerProps, FloatingPanelHeader as Header, type FloatingPanelHeaderBaseProps as HeaderBaseProps, type FloatingPanelHeaderProps as HeaderProps, floatingPanel_OpenChangeDetails as OpenChangeDetails, floatingPanel_PositionChangeDetails as PositionChangeDetails, FloatingPanelPositioner as Positioner, type FloatingPanelPositionerBaseProps as PositionerBaseProps, type FloatingPanelPositionerProps as PositionerProps, FloatingPanelResizeTrigger as ResizeTrigger, type FloatingPanelResizeTriggerBaseProps as ResizeTriggerBaseProps, type FloatingPanelResizeTriggerProps as ResizeTriggerProps, FloatingPanelRoot as Root, type FloatingPanelRootBaseProps as RootBaseProps, type FloatingPanelRootProps as RootProps, FloatingPanelRootProvider as RootProvider, type FloatingPanelRootProviderBaseProps as RootProviderBaseProps, type FloatingPanelRootProviderProps as RootProviderProps, floatingPanel_SizeChangeDetails as SizeChangeDetails, floatingPanel_StageChangeDetails as StageChangeDetails, FloatingPanelStageTrigger as StageTrigger, type FloatingPanelStageTriggerBaseProps as StageTriggerBaseProps, type FloatingPanelStageTriggerProps as StageTriggerProps, FloatingPanelTitle as Title, type FloatingPanelTitleBaseProps as TitleBaseProps, type FloatingPanelTitleProps as TitleProps, FloatingPanelTrigger as Trigger, type FloatingPanelTriggerBaseProps as TriggerBaseProps, type FloatingPanelTriggerProps as TriggerProps };
}

export { floatingPanel as FloatingPanel, FloatingPanelBody, type FloatingPanelBodyBaseProps, type FloatingPanelBodyProps, FloatingPanelCloseTrigger, type FloatingPanelCloseTriggerBaseProps, type FloatingPanelCloseTriggerProps, FloatingPanelContent, type FloatingPanelContentBaseProps, type FloatingPanelContentProps, FloatingPanelContext, type FloatingPanelContextProps, FloatingPanelControl, type FloatingPanelControlBaseProps, type FloatingPanelControlProps, FloatingPanelDragTrigger, type FloatingPanelDragTriggerBaseProps, type FloatingPanelDragTriggerProps, FloatingPanelHeader, type FloatingPanelHeaderBaseProps, type FloatingPanelHeaderProps, FloatingPanelPositioner, type FloatingPanelPositionerBaseProps, type FloatingPanelPositionerProps, FloatingPanelResizeTrigger, type FloatingPanelResizeTriggerBaseProps, type FloatingPanelResizeTriggerProps, FloatingPanelRoot, type FloatingPanelRootBaseProps, type FloatingPanelRootProps, FloatingPanelRootProvider, type FloatingPanelRootProviderBaseProps, type FloatingPanelRootProviderProps, FloatingPanelStageTrigger, type FloatingPanelStageTriggerBaseProps, type FloatingPanelStageTriggerProps, FloatingPanelTitle, type FloatingPanelTitleBaseProps, type FloatingPanelTitleProps, FloatingPanelTrigger, type FloatingPanelTriggerBaseProps, type FloatingPanelTriggerProps, type UseFloatingPanelContext, type UseFloatingPanelProps, type UseFloatingPanelReturn, useFloatingPanel, useFloatingPanelContext };
