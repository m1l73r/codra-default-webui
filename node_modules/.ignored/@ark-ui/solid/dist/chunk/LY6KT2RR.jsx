import {
  createSplitProps
} from "./6WEDGJKQ.jsx";
import {
  ark
} from "./UFYZ7HLU.jsx";
import {
  useEnvironmentContext
} from "./6J5H27AQ.jsx";
import {
  runIfFn
} from "./KGOB2IMX.jsx";
import {
  useLocaleContext
} from "./YUC6JE7K.jsx";
import {
  createContext
} from "./TVCIHLER.jsx";
import {
  __export
} from "./7IUG3E2V.jsx";

// src/components/angle-slider/use-angle-slider-context.ts
var [AngleSliderProvider, useAngleSliderContext] = createContext({
  hookName: "useAngleSliderContext",
  providerName: "<AngleSliderProvider />"
});

// src/components/angle-slider/angle-slider-context.tsx
var AngleSliderContext = (props) => props.children(useAngleSliderContext());

// src/components/angle-slider/angle-slider-control.tsx
import { mergeProps } from "@zag-js/solid";
var AngleSliderControl = (props) => {
  const api = useAngleSliderContext();
  const mergedProps = mergeProps(() => api().getControlProps(), props);
  return <ark.div {...mergedProps} />;
};

// src/components/angle-slider/angle-slider-hidden-input.tsx
import { mergeProps as mergeProps2 } from "@zag-js/solid";
var AngleSliderHiddenInput = (props) => {
  const api = useAngleSliderContext();
  const mergedProps = mergeProps2(() => api().getHiddenInputProps(), props);
  return <ark.input {...mergedProps} />;
};

// src/components/angle-slider/angle-slider-label.tsx
import { mergeProps as mergeProps3 } from "@zag-js/solid";
var AngleSliderLabel = (props) => {
  const api = useAngleSliderContext();
  const mergedProps = mergeProps3(() => api().getLabelProps(), props);
  return <ark.label {...mergedProps} />;
};

// src/components/angle-slider/angle-slider-marker.tsx
import { mergeProps as mergeProps4 } from "@zag-js/solid";
var AngleSliderMarker = (props) => {
  const [markerProps, localProps] = createSplitProps()(props, ["value"]);
  const api = useAngleSliderContext();
  const mergedProps = mergeProps4(() => api().getMarkerProps(markerProps), localProps);
  return <ark.div {...mergedProps} />;
};

// src/components/angle-slider/angle-slider-marker-group.tsx
import { mergeProps as mergeProps5 } from "@zag-js/solid";
var AngleSliderMarkerGroup = (props) => {
  const api = useAngleSliderContext();
  const mergedProps = mergeProps5(() => api().getMarkerGroupProps(), props);
  return <ark.div {...mergedProps} />;
};

// src/components/angle-slider/angle-slider-root.tsx
import { mergeProps as mergeProps6 } from "@zag-js/solid";

// src/components/angle-slider/use-angle-slider.ts
import * as angleSlider from "@zag-js/angle-slider";
import { normalizeProps, useMachine } from "@zag-js/solid";
import { createMemo, createUniqueId } from "solid-js";
var useAngleSlider = (props) => {
  const id = createUniqueId();
  const locale = useLocaleContext();
  const environment = useEnvironmentContext();
  const machineProps = createMemo(() => ({
    id,
    dir: locale().dir,
    getRootNode: environment().getRootNode,
    ...runIfFn(props)
  }));
  const service = useMachine(angleSlider.machine, machineProps);
  return createMemo(() => angleSlider.connect(service, normalizeProps));
};

// src/components/angle-slider/angle-slider-root.tsx
var AngleSliderRoot = (props) => {
  const [useAngleSliderProps, localProps] = createSplitProps()(props, [
    "id",
    "ids",
    "name",
    "invalid",
    "readOnly",
    "disabled",
    "onValueChangeEnd",
    "onValueChange",
    "defaultValue",
    "value",
    "step"
  ]);
  const angleSlider2 = useAngleSlider(useAngleSliderProps);
  const mergedProps = mergeProps6(() => angleSlider2().getRootProps(), localProps);
  return <AngleSliderProvider value={angleSlider2}>
      <ark.div {...mergedProps} />
    </AngleSliderProvider>;
};

// src/components/angle-slider/angle-slider-root-provider.tsx
import { mergeProps as mergeProps7 } from "@zag-js/solid";
var AngleSliderRootProvider = (props) => {
  const [rootProps, localProps] = createSplitProps()(props, ["value"]);
  const mergedProps = mergeProps7(() => rootProps.value().getRootProps(), localProps);
  return <AngleSliderProvider value={rootProps.value}>
      <ark.div {...mergedProps} />
    </AngleSliderProvider>;
};

// src/components/angle-slider/angle-slider-thumb.tsx
import { mergeProps as mergeProps8 } from "@zag-js/solid";
var AngleSliderThumb = (props) => {
  const api = useAngleSliderContext();
  const mergedProps = mergeProps8(() => api().getThumbProps(), props);
  return <ark.div {...mergedProps} />;
};

// src/components/angle-slider/angle-slider-value-text.tsx
import { mergeProps as mergeProps9 } from "@zag-js/solid";
var AngleSliderValueText = (props) => {
  const api = useAngleSliderContext();
  const mergedProps = mergeProps9(() => api().getValueTextProps(), props);
  return <ark.div {...mergedProps}>{props.children || api().valueAsDegree}</ark.div>;
};

// src/components/angle-slider/angle-slider.anatomy.tsx
import { anatomy } from "@zag-js/angle-slider";

// src/components/angle-slider/angle-slider.ts
var angle_slider_exports = {};
__export(angle_slider_exports, {
  Context: () => AngleSliderContext,
  Control: () => AngleSliderControl,
  HiddenInput: () => AngleSliderHiddenInput,
  Label: () => AngleSliderLabel,
  Marker: () => AngleSliderMarker,
  MarkerGroup: () => AngleSliderMarkerGroup,
  Root: () => AngleSliderRoot,
  RootProvider: () => AngleSliderRootProvider,
  Thumb: () => AngleSliderThumb,
  ValueText: () => AngleSliderValueText
});

export {
  useAngleSliderContext,
  AngleSliderContext,
  AngleSliderControl,
  AngleSliderHiddenInput,
  AngleSliderLabel,
  AngleSliderMarker,
  AngleSliderMarkerGroup,
  useAngleSlider,
  AngleSliderRoot,
  AngleSliderRootProvider,
  AngleSliderThumb,
  AngleSliderValueText,
  anatomy,
  angle_slider_exports
};
