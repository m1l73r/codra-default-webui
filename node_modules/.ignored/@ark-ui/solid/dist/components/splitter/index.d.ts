import * as splitter$1 from '@zag-js/splitter';
import { PanelProps, ResizeTriggerProps, ExpandCollapseDetails, PanelData, ResizeDetails, ResizeEndDetails } from '@zag-js/splitter';
export { ExpandCollapseDetails as SplitterExpandCollapseDetails, PanelData as SplitterPanelData, ResizeDetails as SplitterResizeDetails, ResizeEndDetails as SplitterResizeEndDetails, anatomy as splitterAnatomy } from '@zag-js/splitter';
import * as solid_js from 'solid-js';
import { Accessor, JSX } from 'solid-js';
import { PropTypes } from '@zag-js/solid';
import { O as Optional, M as MaybeAccessor, A as Assign } from '../../types-Bc0WfPsv.js';
import { HTMLProps, PolymorphicProps } from '../factory.js';

interface UseSplitterProps extends Optional<Omit<splitter$1.Props, 'dir' | 'getRootNode'>, 'id'> {
}
interface UseSplitterReturn extends Accessor<splitter$1.Api<PropTypes>> {
}
declare const useSplitter: (props: MaybeAccessor<UseSplitterProps>) => UseSplitterReturn;

interface UseSplitterContext extends UseSplitterReturn {
}
declare const useSplitterContext: () => UseSplitterContext;

interface SplitterContextProps {
    children: (context: UseSplitterContext) => JSX.Element;
}
declare const SplitterContext: (props: SplitterContextProps) => JSX.Element;

interface SplitterPanelBaseProps extends PanelProps, PolymorphicProps<'div'> {
}
interface SplitterPanelProps extends Assign<HTMLProps<'div'>, SplitterPanelBaseProps> {
}
declare const SplitterPanel: (props: SplitterPanelProps) => solid_js.JSX.Element;

interface SplitterResizeTriggerBaseProps extends ResizeTriggerProps, PolymorphicProps<'button'> {
}
interface SplitterResizeTriggerProps extends Assign<HTMLProps<'button'>, SplitterResizeTriggerBaseProps> {
}
declare const SplitterResizeTrigger: (props: SplitterResizeTriggerProps) => solid_js.JSX.Element;

interface SplitterRootBaseProps extends UseSplitterProps, PolymorphicProps<'div'> {
}
interface SplitterRootProps extends Assign<HTMLProps<'div'>, SplitterRootBaseProps> {
}
declare const SplitterRoot: (props: SplitterRootProps) => solid_js.JSX.Element;

interface RootProviderProps {
    value: UseSplitterReturn;
}
interface SplitterRootProviderBaseProps extends PolymorphicProps<'div'> {
}
interface SplitterRootProviderProps extends HTMLProps<'div'>, RootProviderProps, SplitterRootProviderBaseProps {
}
declare const SplitterRootProvider: (props: SplitterRootProviderProps) => solid_js.JSX.Element;

declare const splitter_ExpandCollapseDetails: typeof ExpandCollapseDetails;
declare const splitter_PanelData: typeof PanelData;
declare const splitter_ResizeDetails: typeof ResizeDetails;
declare const splitter_ResizeEndDetails: typeof ResizeEndDetails;
declare namespace splitter {
  export { SplitterContext as Context, type SplitterContextProps as ContextProps, splitter_ExpandCollapseDetails as ExpandCollapseDetails, SplitterPanel as Panel, type SplitterPanelBaseProps as PanelBaseProps, splitter_PanelData as PanelData, type SplitterPanelProps as PanelProps, splitter_ResizeDetails as ResizeDetails, splitter_ResizeEndDetails as ResizeEndDetails, SplitterResizeTrigger as ResizeTrigger, type SplitterResizeTriggerBaseProps as ResizeTriggerBaseProps, type SplitterResizeTriggerProps as ResizeTriggerProps, SplitterRoot as Root, type SplitterRootBaseProps as RootBaseProps, type SplitterRootProps as RootProps, SplitterRootProvider as RootProvider, type SplitterRootProviderBaseProps as RootProviderBaseProps, type SplitterRootProviderProps as RootProviderProps };
}

export { splitter as Splitter, SplitterContext, type SplitterContextProps, SplitterPanel, type SplitterPanelBaseProps, type SplitterPanelProps, SplitterResizeTrigger, type SplitterResizeTriggerBaseProps, type SplitterResizeTriggerProps, SplitterRoot, type SplitterRootBaseProps, type SplitterRootProps, SplitterRootProvider, type SplitterRootProviderBaseProps, type SplitterRootProviderProps, type UseSplitterContext, type UseSplitterProps, type UseSplitterReturn, useSplitter, useSplitterContext };
